diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/functions/__init__.py b/web/pgadmin/browser/server_groups/servers/databases/schemas/functions/__init__.py
index 60fd80464..05a39e029 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/functions/__init__.py
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/functions/__init__.py
@@ -33,6 +33,7 @@ from pgadmin.tools.schema_diff.compare import SchemaDiffObjectCompare
 from pgadmin.tools.schema_diff.node_registry import SchemaDiffRegistry
 from pgadmin.utils.ajax import make_json_response, internal_server_error, \
     make_response as ajax_response, gone
+from pgadmin.utils.compile_template_name import compile_template_path
 from pgadmin.utils.driver import get_driver
 
 
@@ -361,12 +362,11 @@ class FunctionView(PGChildNodeView, DataTypeReader, SchemaDiffObjectCompare):
                 template_initial = 'trigger_functions'
 
             # Set the template path for the SQL scripts
-            self.sql_template_path = "/".join([
-                template_initial,
+            self.sql_template_path = compile_template_path(
+                template_initial + '/' + self.manager.server_type + '/sql' ,
                 self.manager.server_type,
-                'sql',
-                '#{0}#'
-            ]).format(self.manager.version)
+                self.manager.version
+            )
 
             return f(*args, **kwargs)
 
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/functions/templates/functions/gpdb/sql/6_plus/get_definition.sql b/web/pgadmin/browser/server_groups/servers/databases/schemas/functions/templates/functions/gpdb/sql/6_plus/get_definition.sql
new file mode 100644
index 000000000..63a53d435
--- /dev/null
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/functions/templates/functions/gpdb/sql/6_plus/get_definition.sql
@@ -0,0 +1,17 @@
+SELECT proretset, prosrc, probin,
+  pg_catalog.pg_get_function_arguments(pg_proc.oid) AS funcargs,
+  pg_catalog.pg_get_function_identity_arguments(pg_proc.oid) AS funciargs,
+  pg_catalog.pg_get_function_result(pg_proc.oid) AS funcresult,
+  proiswindow, provolatile, proisstrict, prosecdef,
+  proconfig, procost, prorows, prodataaccess,
+  'a' as proexeclocation,
+  (SELECT lanname FROM pg_catalog.pg_language WHERE pg_proc.oid = prolang) as lanname,
+  COALESCE(pg_catalog.pg_get_function_identity_arguments(pg_proc.oid), '') AS func_with_identity_arguments,
+  nspname,
+  proname,
+  COALESCE(pg_catalog.pg_get_function_arguments(pg_proc.oid), '') AS func_args
+FROM pg_catalog.pg_proc
+  JOIN pg_namespace nsp ON nsp.oid=pg_proc.pronamespace
+WHERE proisagg = FALSE
+  AND pronamespace = {{scid}}::oid
+  AND pg_proc.oid = {{fnid}}::oid;
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/__init__.py b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/__init__.py
index 48a722f2f..269fe7272 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/__init__.py
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/__init__.py
@@ -22,6 +22,7 @@ from pgadmin.utils.ajax import make_json_response, internal_server_error, \
     make_response as ajax_response, gone
 from pgadmin.browser.server_groups.servers.databases.schemas.tables.\
     constraints.foreign_key import utils as fkey_utils
+from pgadmin.utils.compile_template_name import compile_template_path
 from pgadmin.utils.driver import get_driver
 from config import PG_DEFAULT_DRIVER
 
@@ -184,8 +185,7 @@ class ForeignKeyConstraintView(PGChildNodeView):
     """
 
     node_type = 'foreign_key'
-    FOREIGN_KEY_PATH = 'foreign_key/sql/#{0}#'
-
+    FOREIGN_KEY_PATH = 'foreign_key/sql'
     parent_ids = [
         {'type': 'int', 'id': 'gid'},
         {'type': 'int', 'id': 'sid'},
@@ -243,8 +243,11 @@ class ForeignKeyConstraintView(PGChildNodeView):
                 self.datistemplate = self.manager.db_info[
                     kwargs['did']]['datistemplate']
 
-            self.template_path = self.FOREIGN_KEY_PATH.format(
-                self.manager.version)
+            self.template_path = compile_template_path(
+                self.FOREIGN_KEY_PATH,
+                self.manager.server_type,
+                self.manager.version
+            )
 
             # We need parent's name eg table name and schema name
             schema, table = fkey_utils.get_parent(self.conn, kwargs['tid'])
@@ -348,8 +351,11 @@ class ForeignKeyConstraintView(PGChildNodeView):
         """
         self.manager = get_driver(PG_DEFAULT_DRIVER).connection_manager(sid)
         self.conn = self.manager.connection(did=did)
-        self.template_path = self.FOREIGN_KEY_PATH.format(
-            self.manager.version)
+        self.template_path = compile_template_path(
+            self.FOREIGN_KEY_PATH,
+            self.manager.server_type,
+            self.manager.version
+        )
 
         # We need parent's name eg table name and schema name
         schema, table = fkey_utils.get_parent(self.conn, tid)
@@ -459,7 +465,11 @@ class ForeignKeyConstraintView(PGChildNodeView):
         """
         self.manager = get_driver(PG_DEFAULT_DRIVER).connection_manager(sid)
         self.conn = self.manager.connection(did=did)
-        self.template_path = self.FOREIGN_KEY_PATH.format(self.manager.version)
+        self.template_path = compile_template_path(
+            self.FOREIGN_KEY_PATH,
+            self.manager.server_type,
+            self.manager.version
+        )
 
         # We need parent's name eg table name and schema name
         schema, table = fkey_utils.get_parent(self.conn, tid)
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/utils.py b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/utils.py
index 3e99e5698..7d1ce2099 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/utils.py
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/utils.py
@@ -9,11 +9,14 @@
 
 """ Implements Utility class for Foreign Keys. """
 
+from functools import wraps
+
 from flask import render_template
 from flask_babelex import gettext as _
+
 from pgadmin.utils.ajax import internal_server_error
+from pgadmin.utils.compile_template_name import compile_template_path
 from pgadmin.utils.exception import ObjectGone, ExecuteError
-from functools import wraps
 
 FKEY_PROPERTIES_SQL = 'properties.sql'
 
@@ -29,9 +32,11 @@ def get_template_path(f):
         # Here args[0] will hold the connection object
         conn_obj = args[0]
         if 'template_path' not in kwargs:
-            kwargs['template_path'] = 'foreign_key/sql/#{0}#'.format(
-                conn_obj.manager.version)
-
+            kwargs['template_path'] = compile_template_path(
+                'foreign_key/sql',
+                conn_obj.manager.server_type,
+                conn_obj.manager.version
+            )
         return f(*args, **kwargs)
     return wrap
 
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/__init__.py b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/__init__.py
index 91deca0fb..0a9f6ac62 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/__init__.py
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/__init__.py
@@ -18,6 +18,8 @@ from flask_babelex import gettext
 from pgadmin.browser.collection import CollectionNodeModule
 from pgadmin.browser.server_groups.servers.databases.schemas.tables.\
     partitions import backend_supported
+from pgadmin.browser.server_groups.servers.databases.schemas.tables. \
+    indexes import utils as index_utils
 from pgadmin.browser.utils import PGChildNodeView
 from pgadmin.utils.ajax import make_json_response, internal_server_error, \
     make_response as ajax_response, gone
@@ -27,8 +29,6 @@ from config import PG_DEFAULT_DRIVER
 from pgadmin.tools.schema_diff.node_registry import SchemaDiffRegistry
 from pgadmin.tools.schema_diff.directory_compare import directory_diff
 from pgadmin.tools.schema_diff.compare import SchemaDiffObjectCompare
-from pgadmin.browser.server_groups.servers.databases.schemas. \
-    tables.indexes import utils as index_utils
 
 
 class IndexesModule(CollectionNodeModule):
@@ -260,7 +260,7 @@ class IndexesView(PGChildNodeView, SchemaDiffObjectCompare):
 
             # we will set template path for sql scripts
             self.template_path = compile_template_path(
-                'indexes/sql/',
+                'indexes/sql',
                 self.manager.server_type,
                 self.manager.version
             )
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/utils.py b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/utils.py
index d8556f11e..28c0fe49f 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/utils.py
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/utils.py
@@ -9,11 +9,13 @@
 
 """ Implements Utility class for Indexes. """
 
+from functools import wraps
+
 from flask import render_template
 from flask_babelex import gettext as _
 from pgadmin.utils.ajax import internal_server_error
+from pgadmin.utils.compile_template_name import compile_template_path
 from pgadmin.utils.exception import ObjectGone, ExecuteError
-from functools import wraps
 
 
 def get_template_path(f):
@@ -27,9 +29,11 @@ def get_template_path(f):
         # Here args[0] will hold the connection object
         conn_obj = args[0]
         if 'template_path' not in kwargs or kwargs['template_path'] is None:
-            kwargs['template_path'] = \
-                'indexes/sql/#{0}#'.format(conn_obj.manager.version)
-
+            kwargs['template_path'] = compile_template_path(
+                'indexes/sql',
+                conn_obj.manager.server_type,
+                conn_obj.manager.version
+            )
         return f(*args, **kwargs)
     return wrap
 
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/foreign_key/sql/gpdb_5.0_plus/properties.sql b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/foreign_key/sql/gpdb_5.0_plus/properties.sql
new file mode 100644
index 000000000..e69de29bb
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/partitions/sql/gpdb/6_plus/nodes.sql b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/partitions/sql/gpdb/6_plus/nodes.sql
new file mode 100644
index 000000000..6b5b4ff93
--- /dev/null
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/partitions/sql/gpdb/6_plus/nodes.sql
@@ -0,0 +1,39 @@
+SELECT
+  table_class.oid,
+  partitions.partitiontablename                                                   AS name,
+  (SELECT count(*)
+   FROM pg_trigger
+   WHERE tgrelid = table_class.oid AND tgisinternal = FALSE)                     AS triggercount,
+  (SELECT count(*)
+   FROM pg_trigger
+   WHERE tgrelid = table_class.oid AND tgisinternal = FALSE AND tgenabled = 'O') AS has_enable_triggers,
+  partitions.partitionboundary                                                    AS partition_value,
+  partitions.partitionschemaname                                                  AS schema_id,
+  schema_name,
+  CASE WHEN sub_partitions.n > 0
+    THEN TRUE
+  ELSE FALSE END                                                                     is_partitioned,
+  ''                                                                              AS partition_scheme
+FROM
+  (SELECT
+     table_class.relnamespace,
+     nsp.nspname AS schema_name,
+     partitions.partitiontablename,
+     partitions.partitionboundary,
+     partitions.partitionschemaname
+   FROM pg_class table_class
+     INNER JOIN pg_partitions partitions
+       ON (relname = tablename AND parentpartitiontablename IS NULL) OR relname = parentpartitiontablename
+     LEFT JOIN pg_namespace nsp ON table_class.relnamespace = nsp.oid
+   WHERE
+    {% if ptid %} table_class.oid = {{ ptid }}::OID {% endif %}
+    {% if not ptid %} table_class.oid = {{ tid }}::OID {% endif %}
+  ) AS partitions
+  LEFT JOIN (SELECT
+               parentpartitiontablename,
+               count(*) AS n
+             FROM pg_partitions
+             GROUP BY parentpartitiontablename) sub_partitions
+    ON partitions.partitiontablename = sub_partitions.parentpartitiontablename
+  LEFT JOIN pg_class table_class ON partitions.relnamespace = table_class.relnamespace AND partitions.partitiontablename = table_class.relname
+ORDER BY partitions.partitiontablename;
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/partitions/sql/gpdb/6_plus/properties.sql b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/partitions/sql/gpdb/6_plus/properties.sql
new file mode 100644
index 000000000..49114693c
--- /dev/null
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/partitions/sql/gpdb/6_plus/properties.sql
@@ -0,0 +1,82 @@
+SELECT rel.oid, rel.relname AS name, rel.reltablespace AS spcoid,rel.relacl AS relacl_str,
+  (CASE WHEN length(spc.spcname::text) > 0 THEN spc.spcname ELSE
+    (SELECT sp.spcname FROM pg_database dtb
+    JOIN pg_tablespace sp ON dtb.dattablespace=sp.oid
+    WHERE dtb.oid = {{ did }}::oid)
+  END) as spcname,
+  (select nspname FROM pg_namespace WHERE oid = {{scid}}::oid ) as parent_schema,
+  nsp.nspname as schema,
+  pg_get_userbyid(rel.relowner) AS relowner, rel.relhasoids,
+  (CASE WHEN partitions.number_of_partitions > 0 THEN true ELSE false END) AS relispartition,
+  rel.relhassubclass, rel.reltuples::bigint, des.description, con.conname, con.conkey,
+	EXISTS(select 1 FROM pg_trigger
+			JOIN pg_proc pt ON pt.oid=tgfoid AND pt.proname='logtrigger'
+			JOIN pg_proc pc ON pc.pronamespace=pt.pronamespace AND pc.proname='slonyversion'
+			WHERE tgrelid=rel.oid) AS isrepl,
+	(SELECT count(*)
+   FROM pg_trigger
+   WHERE tgrelid = rel.oid AND tgisinternal = FALSE) AS triggercount,
+	(SELECT ARRAY(SELECT CASE WHEN (nspname NOT LIKE 'pg\_%') THEN
+            quote_ident(nspname)||'.'||quote_ident(c.relname)
+            ELSE quote_ident(c.relname) END AS inherited_tables
+    FROM pg_inherits i
+    JOIN pg_class c ON c.oid = i.inhparent
+    JOIN pg_namespace n ON n.oid=c.relnamespace
+    WHERE i.inhrelid = rel.oid ORDER BY inhseqno)) AS coll_inherits,
+  (SELECT count(*)
+		FROM pg_inherits i
+      JOIN pg_class c ON c.oid = i.inhparent
+      JOIN pg_namespace n ON n.oid=c.relnamespace
+		WHERE i.inhrelid = rel.oid) AS inherited_tables_cnt,
+  false AS relpersistence,
+	substring(array_to_string(rel.reloptions, ',') FROM 'fillfactor=([0-9]*)') AS fillfactor,
+	(substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_enabled=([a-z|0-9]*)'))::BOOL AS autovacuum_enabled,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_threshold=([0-9]*)') AS autovacuum_vacuum_threshold,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_scale_factor=([0-9]*[.]?[0-9]*)') AS autovacuum_vacuum_scale_factor,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_analyze_threshold=([0-9]*)') AS autovacuum_analyze_threshold,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_analyze_scale_factor=([0-9]*[.]?[0-9]*)') AS autovacuum_analyze_scale_factor,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_cost_delay=([0-9]*)') AS autovacuum_vacuum_cost_delay,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_cost_limit=([0-9]*)') AS autovacuum_vacuum_cost_limit,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_freeze_min_age=([0-9]*)') AS autovacuum_freeze_min_age,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_freeze_max_age=([0-9]*)') AS autovacuum_freeze_max_age,
+	substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_freeze_table_age=([0-9]*)') AS autovacuum_freeze_table_age,
+	(substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_enabled=([a-z|0-9]*)'))::BOOL AS toast_autovacuum_enabled,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_threshold=([0-9]*)') AS toast_autovacuum_vacuum_threshold,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_scale_factor=([0-9]*[.]?[0-9]*)') AS toast_autovacuum_vacuum_scale_factor,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_analyze_threshold=([0-9]*)') AS toast_autovacuum_analyze_threshold,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_analyze_scale_factor=([0-9]*[.]?[0-9]*)') AS toast_autovacuum_analyze_scale_factor,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_cost_delay=([0-9]*)') AS toast_autovacuum_vacuum_cost_delay,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_cost_limit=([0-9]*)') AS toast_autovacuum_vacuum_cost_limit,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_freeze_min_age=([0-9]*)') AS toast_autovacuum_freeze_min_age,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_freeze_max_age=([0-9]*)') AS toast_autovacuum_freeze_max_age,
+	substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_freeze_table_age=([0-9]*)') AS toast_autovacuum_freeze_table_age,
+	array_to_string(rel.reloptions, ',') AS table_vacuum_settings_str,
+	array_to_string(tst.reloptions, ',') AS toast_table_vacuum_settings_str,
+	rel.reloptions AS reloptions, tst.reloptions AS toast_reloptions, rel.reltype, typ.typname,
+	typ.typrelid AS typoid,
+	(CASE WHEN rel.reltoastrelid = 0 THEN false ELSE true END) AS hastoasttable,
+    -- Added for pgAdmin4
+	NULL AS seclabels,
+	(CASE WHEN rel.oid <= {{ datlastsysoid}}::oid THEN true ElSE false END) AS is_sys_table,
+	-- Added for partition table
+	(CASE WHEN partitions.number_of_partitions > 0 THEN true ELSE false END) AS is_partitioned,
+	'' AS partition_scheme,
+	{% if ptid %}
+	  (CASE WHEN partitions.number_of_partitions > 0 THEN partitions.expression ELSE '' END) AS partition_value,
+	  (SELECT relname FROM pg_class WHERE oid = {{ tid }}::oid) AS partitioned_table_name
+	{% else %}
+	  partitions.expression AS partition_value
+	{% endif %}
+
+FROM pg_class rel
+  LEFT OUTER JOIN pg_tablespace spc on spc.oid=rel.reltablespace
+  LEFT OUTER JOIN pg_description des ON (des.objoid=rel.oid AND des.objsubid=0 AND des.classoid='pg_class'::regclass)
+  LEFT OUTER JOIN pg_constraint con ON con.conrelid=rel.oid AND con.contype='p'
+  LEFT OUTER JOIN pg_class tst ON tst.oid = rel.reltoastrelid
+  LEFT JOIN pg_type typ ON rel.reltype=typ.oid
+  LEFT JOIN pg_inherits inh ON inh.inhrelid = rel.oid
+  LEFT JOIN pg_namespace nsp ON rel.relnamespace = nsp.oid
+  LEFT JOIN (SELECT tablename, partitionboundary as expression, count(*) number_of_partitions FROM pg_partitions GROUP BY tablename, expression) partitions ON rel.relname = tablename
+WHERE inh.inhparent = {{ tid }}::oid
+{% if ptid %}  AND rel.oid = {{ ptid }}::oid {% endif %}
+ORDER BY rel.relname;
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/create.sql b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/create.sql
index b6ff1f188..b1862b3a2 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/create.sql
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/create.sql
@@ -41,8 +41,8 @@ CREATE {% if data.relpersistence %}UNLOGGED {% endif %}TABLE {{conn|qtIdent(data
 {### Add columns ###}
 {% if data.columns and data.columns|length > 0 %}
 {% for c in data.columns %}
-{% if c.name and c.cltype %}
-    {% if c.inheritedfromtable %}-- Inherited from table {{c.inheritedfromtable}}: {% elif c.inheritedfromtype %}-- Inherited from type {{c.inheritedfromtype}}: {% endif %}{{conn|qtIdent(c.name)}} {% if is_sql %}{{c.displaytypname}}{% else %}{{ GET_TYPE.CREATE_TYPE_SQL(conn, c.cltype, c.attlen, c.attprecision, c.hasSqrBracket) }}{% endif %}{% if c.collspcname %} COLLATE {{c.collspcname}}{% endif %}{% if c.attnotnull %} NOT NULL{% endif %}{% if c.defval is defined and c.defval is not none and c.defval != '' %} DEFAULT {{c.defval}}{% endif %}
+{% if c.name and c.cltype and not c.inheritedfrom %}
+    {{conn|qtIdent(c.name)}} {% if is_sql %}{{c.displaytypname}}{% else %}{{ GET_TYPE.CREATE_TYPE_SQL(conn, c.cltype, c.attlen, c.attprecision, c.hasSqrBracket) }}{% endif %}{% if c.collspcname %} COLLATE {{c.collspcname}}{% endif %}{% if c.attnotnull %} NOT NULL{% endif %}{% if c.defval %} DEFAULT {{c.defval}}{% endif %}
 {% if not loop.last %},
 {% endif %}
 {% endif %}
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/properties.sql b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/properties.sql
index 738608c54..e040542d0 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/properties.sql
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_5.0_plus/properties.sql
@@ -59,14 +59,14 @@ FROM (
 		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_freeze_table_age=([0-9]*)') AS toast_autovacuum_freeze_table_age,
 		array_to_string(rel.reloptions, ',') AS table_vacuum_settings_str,
 		array_to_string(tst.reloptions, ',') AS toast_table_vacuum_settings_str,
-		rel.reloptions AS reloptions, tst.reloptions AS toast_reloptions, NULL AS reloftype, typ.typname AS typname,
+		rel.reloptions AS reloptions, tst.reloptions AS toast_reloptions, NULL AS reloftype, NULL AS typname,
 		typ.typrelid AS typoid,
 		(CASE WHEN rel.reltoastrelid = 0 THEN false ELSE true END) AS hastoasttable,
 		ARRAY[]::varchar[] AS seclabels,
 		(CASE WHEN rel.oid <= {{ datlastsysoid}}::oid THEN true ElSE false END) AS is_sys_table,
 
 		gdp.attrnums AS distribution,
-    (CASE WHEN (SELECT count(*) from pg_partition where parrelid = rel.oid) > 0 THEN true ELSE false END) AS is_partitioned
+    	(CASE WHEN (SELECT count(*) from pg_partition where parrelid = rel.oid) > 0 THEN true ELSE false END) AS is_partitioned
 
 
 	FROM pg_class rel
@@ -81,3 +81,4 @@ FROM (
 	{% if tid %}  AND rel.oid = {{ tid }}::oid {% endif %}
 ) AS TableInformation
  ORDER BY name
+ 
\ No newline at end of file
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_6.0_plus/properties.sql b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_6.0_plus/properties.sql
new file mode 100644
index 000000000..1b69398e5
--- /dev/null
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/templates/tables/sql/gpdb_6.0_plus/properties.sql
@@ -0,0 +1,83 @@
+SELECT *,
+	(CASE when pre_coll_inherits is NULL then ARRAY[]::varchar[] else pre_coll_inherits END) as coll_inherits
+  {% if tid %}, (CASE WHEN is_partitioned THEN (SELECT substring(pg_get_partition_def({{ tid }}::oid, true) from 14)) ELSE '' END) AS partition_scheme {% endif %}
+FROM (
+	SELECT rel.oid, rel.relname AS name, rel.reltablespace AS spcoid,rel.relacl AS relacl_str,
+		(CASE WHEN length(spc.spcname::text) > 0 THEN spc.spcname ELSE
+			(SELECT sp.spcname FROM pg_database dtb
+			JOIN pg_tablespace sp ON dtb.dattablespace=sp.oid
+			WHERE dtb.oid = {{ did }}::oid)
+		END) as spcname,
+		(select nspname FROM pg_namespace WHERE oid = {{scid}}::oid ) as schema,
+		pg_get_userbyid(rel.relowner) AS relowner, rel.relhasoids,
+		rel.relhassubclass, rel.reltuples::bigint, des.description, con.conname, con.conkey,
+		EXISTS(select 1 FROM pg_trigger
+				JOIN pg_proc pt ON pt.oid=tgfoid AND pt.proname='logtrigger'
+				JOIN pg_proc pc ON pc.pronamespace=pt.pronamespace AND pc.proname='slonyversion'
+				WHERE tgrelid=rel.oid) AS isrepl,
+		(SELECT count(*) FROM pg_trigger WHERE tgrelid=rel.oid) AS triggercount,
+		(SELECT ARRAY(SELECT CASE WHEN (nspname NOT LIKE 'pg\_%') THEN
+							quote_ident(nspname)||'.'||quote_ident(c.relname)
+							ELSE quote_ident(c.relname) END AS inherited_tables
+			FROM pg_inherits i
+			JOIN pg_class c ON c.oid = i.inhparent
+			JOIN pg_namespace n ON n.oid=c.relnamespace
+			WHERE i.inhrelid = rel.oid ORDER BY inhseqno)) AS pre_coll_inherits,
+		(SELECT count(*)
+			FROM pg_inherits i
+				JOIN pg_class c ON c.oid = i.inhparent
+				JOIN pg_namespace n ON n.oid=c.relnamespace
+			WHERE i.inhrelid = rel.oid) AS inherited_tables_cnt,
+		false AS relpersistence,
+		substring(array_to_string(rel.reloptions, ',') FROM 'fillfactor=([0-9]*)') AS fillfactor,
+		substring(array_to_string(rel.reloptions, ',') FROM 'compresslevel=([0-9]*)') AS compresslevel,
+		substring(array_to_string(rel.reloptions, ',') FROM 'blocksize=([0-9]*)') AS blocksize,
+		substring(array_to_string(rel.reloptions, ',') FROM 'orientation=(row|column)') AS orientation,
+		substring(array_to_string(rel.reloptions, ',') FROM 'appendonly=(true|false)')::boolean AS appendonly,
+		substring(array_to_string(rel.reloptions, ',') FROM 'compresstype=(zlib|quicklz|rle_type|none)') AS compresstype,
+		(CASE WHEN (substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_enabled=([a-z|0-9]*)') = 'true')
+			THEN true ELSE false END) AS autovacuum_enabled,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_threshold=([0-9]*)') AS autovacuum_vacuum_threshold,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_scale_factor=([0-9]*[.]?[0-9]*)') AS autovacuum_vacuum_scale_factor,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_analyze_threshold=([0-9]*)') AS autovacuum_analyze_threshold,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_analyze_scale_factor=([0-9]*[.]?[0-9]*)') AS autovacuum_analyze_scale_factor,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_cost_delay=([0-9]*)') AS autovacuum_vacuum_cost_delay,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_vacuum_cost_limit=([0-9]*)') AS autovacuum_vacuum_cost_limit,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_freeze_min_age=([0-9]*)') AS autovacuum_freeze_min_age,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_freeze_max_age=([0-9]*)') AS autovacuum_freeze_max_age,
+		substring(array_to_string(rel.reloptions, ',') FROM 'autovacuum_freeze_table_age=([0-9]*)') AS autovacuum_freeze_table_age,
+		(CASE WHEN (substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_enabled=([a-z|0-9]*)') =  'true')
+			THEN true ELSE false END) AS toast_autovacuum_enabled,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_threshold=([0-9]*)') AS toast_autovacuum_vacuum_threshold,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_scale_factor=([0-9]*[.]?[0-9]*)') AS toast_autovacuum_vacuum_scale_factor,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_analyze_threshold=([0-9]*)') AS toast_autovacuum_analyze_threshold,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_analyze_scale_factor=([0-9]*[.]?[0-9]*)') AS toast_autovacuum_analyze_scale_factor,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_cost_delay=([0-9]*)') AS toast_autovacuum_vacuum_cost_delay,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_vacuum_cost_limit=([0-9]*)') AS toast_autovacuum_vacuum_cost_limit,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_freeze_min_age=([0-9]*)') AS toast_autovacuum_freeze_min_age,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_freeze_max_age=([0-9]*)') AS toast_autovacuum_freeze_max_age,
+		substring(array_to_string(tst.reloptions, ',') FROM 'autovacuum_freeze_table_age=([0-9]*)') AS toast_autovacuum_freeze_table_age,
+		array_to_string(rel.reloptions, ',') AS table_vacuum_settings_str,
+		array_to_string(tst.reloptions, ',') AS toast_table_vacuum_settings_str,
+		rel.reloptions AS reloptions, tst.reloptions AS toast_reloptions, NULL AS reloftype, NULL AS typname,
+		typ.typrelid AS typoid,
+		(CASE WHEN rel.reltoastrelid = 0 THEN false ELSE true END) AS hastoasttable,
+		ARRAY[]::varchar[] AS seclabels,
+		(CASE WHEN rel.oid <= {{ datlastsysoid}}::oid THEN true ElSE false END) AS is_sys_table,
+
+		gdp.distkey::smallint[] AS distribution,
+    	(CASE WHEN (SELECT count(*) from pg_partition where parrelid = rel.oid) > 0 THEN true ELSE false END) AS is_partitioned
+
+
+	FROM pg_class rel
+		LEFT OUTER JOIN pg_tablespace spc on spc.oid=rel.reltablespace
+		LEFT OUTER JOIN pg_description des ON (des.objoid=rel.oid AND des.objsubid=0 AND des.classoid='pg_class'::regclass)
+		LEFT OUTER JOIN pg_constraint con ON con.conrelid=rel.oid AND con.contype='p'
+		LEFT OUTER JOIN pg_class tst ON tst.oid = rel.reltoastrelid
+		LEFT OUTER JOIN gp_distribution_policy gdp ON gdp.localoid = rel.oid
+		LEFT OUTER JOIN pg_type typ ON typ.oid = rel.reltype
+
+	 WHERE rel.relkind IN ('r','s','t') AND rel.relnamespace = {{ scid }}
+	{% if tid %}  AND rel.oid = {{ tid }}::oid {% endif %}
+) AS TableInformation
+ ORDER BY name
diff --git a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/utils.py b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/utils.py
index 1299d9ed1..132a2e158 100644
--- a/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/utils.py
+++ b/web/pgadmin/browser/server_groups/servers/databases/schemas/tables/utils.py
@@ -116,7 +116,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
             self.datlastsysoid = self.manager.db_info[
                 did
             ]['datlastsysoid'] if self.manager.db_info is not None and \
-                did in self.manager.db_info else 0
+                                  did in self.manager.db_info else 0
 
             ver = self.manager.version
             server_type = self.manager.server_type
@@ -541,7 +541,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
             module_view = SchemaDiffRegistry.get_node_view(module)
             if module_view.blueprint.server_type is None or \
                 self.manager.server_type in \
-                    module_view.blueprint.server_type:
+                module_view.blueprint.server_type:
                 sub_data = module_view.fetch_objects_to_compare(
                     sid=sid, did=did, scid=scid, tid=row['oid'],
                     oid=None)
@@ -602,12 +602,12 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
 
         # If estimated rows are greater than threshold then
         if estimated_row_count and \
-                estimated_row_count > table_row_count_threshold:
+            estimated_row_count > table_row_count_threshold:
             res['rows'][0]['rows_cnt'] = str(table_row_count_threshold) + '+'
 
         # If estimated rows is lower than threshold then calculate the count
         elif estimated_row_count and \
-                table_row_count_threshold >= estimated_row_count:
+            table_row_count_threshold >= estimated_row_count:
             sql = render_template(
                 "/".join(
                     [self.table_template_path, 'get_table_row_count.sql']
@@ -769,10 +769,10 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
             for row in rset['rows']:
                 policy_sql = row_security_policies_utils. \
                     get_reverse_engineered_sql(
-                        self.conn, schema=schema, table=table, scid=scid,
-                        plid=row['oid'], policy_table_id=tid,
-                        datlastsysoid=self.datlastsysoid,
-                        template_path=None, with_header=json_resp)
+                    self.conn, schema=schema, table=table, scid=scid,
+                    plid=row['oid'], policy_table_id=tid,
+                    datlastsysoid=self.datlastsysoid,
+                    template_path=None, with_header=json_resp)
                 policy_sql = "\n" + policy_sql
 
                 # Add into main sql
@@ -815,7 +815,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
         """
 
         if self.manager.server_type == 'ppas' \
-                and self.manager.version >= 120000:
+            and self.manager.version >= 120000:
             sql = render_template("/".join(
                 [self.compound_trigger_template_path, self._NODES_SQL]),
                 tid=tid)
@@ -1048,7 +1048,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
 
         # Get Reverse engineered sql for Partitions
         partition_main_sql = ""
-        if is_partitioned:
+        if is_partitioned and self.manager.server_type != 'gpdb':
             sql = render_template("/".join([self.partition_template_path,
                                             self._NODES_SQL]),
                                   scid=scid, tid=tid)
@@ -1242,7 +1242,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                     column_sql += render_template("/".join(
                         [self.column_template_path, self._DELETE_SQL]),
                         data=c, conn=self.conn).strip('\n') + \
-                        self.double_newline
+                                  self.double_newline
         return column_sql
 
     def _check_for_column_update(self, columns, data, column_sql, tid):
@@ -1267,7 +1267,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                 old_col_data = res['rows'][0]
 
                 old_col_data['cltype'], \
-                    old_col_data['hasSqrBracket'] = \
+                old_col_data['hasSqrBracket'] = \
                     column_utils.type_formatter(old_col_data['cltype'])
                 old_col_data = \
                     column_utils.convert_length_precision_to_string(
@@ -1281,7 +1281,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
 
                 # Sql for alter column
                 if 'inheritedfrom' not in c and \
-                        'inheritedfromtable' not in c:
+                    'inheritedfromtable' not in c:
                     column_sql += render_template("/".join(
                         [self.column_template_path, self._UPDATE_SQL]),
                         data=c, o_data=old_col_data, conn=self.conn
@@ -1298,11 +1298,11 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                 c = column_utils.convert_length_precision_to_string(c)
 
                 if 'inheritedfrom' not in c and \
-                        'inheritedfromtable' not in c:
+                    'inheritedfromtable' not in c:
                     column_sql += render_template("/".join(
                         [self.column_template_path, self._CREATE_SQL]),
                         data=c, conn=self.conn).strip('\n') + \
-                        self.double_newline
+                                  self.double_newline
         return column_sql
 
     def _check_for_partitions_in_sql(self, data, old_data, sql):
@@ -1336,7 +1336,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
 
             # If partition(s) is/are added
             if 'added' in partitions and 'partition_scheme' in old_data \
-                    and old_data['partition_scheme'] != '':
+                and old_data['partition_scheme'] != '':
                 temp_data = dict()
                 temp_data['schema'] = data['schema']
                 temp_data['name'] = data['name']
@@ -1571,7 +1571,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                 return internal_server_error(errormsg=rest)
 
             sql = render_template("/".join([self.table_template_path,
-                                  self._GET_SCHEMA_OID_SQL]), tid=tid)
+                                            self._GET_SCHEMA_OID_SQL]), tid=tid)
             status, rest = self.conn.execute_2darray(sql)
             if not status:
                 return internal_server_error(errormsg=rest)
@@ -1714,7 +1714,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
         if data['toast_reloptions'] is not None:
             data['vacuum_settings_str'] += '\n' \
                 if data['vacuum_settings_str'] != '' else ''
-            data['vacuum_settings_str'] += '\n'.\
+            data['vacuum_settings_str'] += '\n'. \
                 join(map(lambda o: 'toast.' + o, data['toast_reloptions']))
 
         data['vacuum_settings_str'] = data[
@@ -1841,8 +1841,8 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                 part_data['name'] = row['partition_name']
 
             if 'is_default' in row and row['is_default'] and (
-                    partitions['partition_type'] == 'range' or
-                    partitions['partition_type'] == 'list'):
+                partitions['partition_type'] == 'range' or
+                partitions['partition_type'] == 'list'):
                 part_data['partition_value'] = 'DEFAULT'
             elif partitions['partition_type'] == 'range':
                 range_from = row['values_from'].split(',')
@@ -1853,14 +1853,14 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                 to_str = ', '.join("{0}".format(item) for
                                    item in range_to)
 
-                part_data['partition_value'] = 'FOR VALUES FROM (' +\
-                                               from_str + ') TO (' +\
+                part_data['partition_value'] = 'FOR VALUES FROM (' + \
+                                               from_str + ') TO (' + \
                                                to_str + ')'
 
             elif partitions['partition_type'] == 'list':
                 range_in = row['values_in'].split(',')
                 in_str = ', '.join("{0}".format(item) for item in range_in)
-                part_data['partition_value'] = 'FOR VALUES IN (' + in_str\
+                part_data['partition_value'] = 'FOR VALUES IN (' + in_str \
                                                + ')'
 
             else:
@@ -1872,9 +1872,9 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                 remainder_str = ', '.join("{0}".format(item) for item in
                                           range_remainder)
 
-                part_data['partition_value'] = 'FOR VALUES WITH (MODULUS '\
+                part_data['partition_value'] = 'FOR VALUES WITH (MODULUS ' \
                                                + modulus_str \
-                                               + ', REMAINDER ' +\
+                                               + ', REMAINDER ' + \
                                                remainder_str + ')'
 
             partition_sql = self._check_for_partitioned_table(row, part_data,
@@ -2040,7 +2040,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                         opt.pop('value')
         # Iterate vacuum table
         elif vacuum_key in data and 'changed' in data[vacuum_key] \
-                and vacuum_key in old_data:
+            and vacuum_key in old_data:
             set_values = []
             reset_values = []
             self._iterate_vacuume_table(data, old_data, set_values,
@@ -2051,11 +2051,11 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
         for data_row in data[vacuum_key]['changed']:
             for old_data_row in old_data[vacuum_key]:
                 if data_row['name'] == old_data_row['name'] and \
-                        'value' in data_row:
+                    'value' in data_row:
                     if data_row['value'] is not None:
                         set_values.append(data_row)
                     elif data_row['value'] is None and \
-                            'value' in old_data_row:
+                        'value' in old_data_row:
                         reset_values.append(data_row)
 
         if len(set_values) > 0:
@@ -2093,7 +2093,7 @@ class BaseTableView(PGChildNodeView, BasePartitionTable, VacuumSettings):
                 res['autovacuum_freeze_min_age'],
                 res['autovacuum_freeze_max_age'],
                 res['autovacuum_freeze_table_age']]) or \
-                res['autovacuum_enabled'] in ('t', 'f')
+                                       res['autovacuum_enabled'] in ('t', 'f')
 
             res['toast_autovacuum'] = any([
                 res['toast_autovacuum_vacuum_threshold'],
diff --git a/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/dependents.sql b/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/dependents.sql
new file mode 100644
index 000000000..8e398878c
--- /dev/null
+++ b/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/dependents.sql
@@ -0,0 +1,40 @@
+{% if fetch_database %}
+SELECT 'd' as type, datname,
+    datallowconn AND pg_catalog.has_database_privilege(datname, 'CONNECT') AS datallowconn,
+    datdba, datlastsysoid
+FROM pg_database db
+UNION
+SELECT 'M', spcname, null, null, null
+    FROM pg_tablespace where spcowner={{rid}}::oid
+ORDER BY 1, 2
+{% endif %}
+
+{% if fetch_dependents %}
+SELECT cl.relkind, COALESCE(cin.nspname, cln.nspname) as nspname,
+    COALESCE(ci.relname, cl.relname) as relname, cl.relname as indname
+FROM pg_class cl
+JOIN pg_namespace cln ON cl.relnamespace=cln.oid
+LEFT OUTER JOIN pg_index ind ON ind.indexrelid=cl.oid
+LEFT OUTER JOIN pg_class ci ON ind.indrelid=ci.oid
+LEFT OUTER JOIN pg_namespace cin ON ci.relnamespace=cin.oid
+WHERE cl.oid IN (SELECT objid FROM pg_shdepend WHERE refobjid={{rid}}::oid) AND cl.oid > {{lastsysoid}}::oid
+UNION ALL SELECT 'n', null, nspname, null
+    FROM pg_namespace nsp
+    WHERE nsp.oid IN (SELECT objid FROM pg_shdepend WHERE refobjid={{rid}}::oid) AND nsp.oid > {{lastsysoid}}::oid
+UNION ALL SELECT CASE WHEN typtype='d' THEN 'd' ELSE 'y' END, null, typname, null
+    FROM pg_type ty
+    WHERE ty.oid IN (SELECT objid FROM pg_shdepend WHERE refobjid={{rid}}::oid) AND ty.oid > {{lastsysoid}}::oid
+UNION ALL SELECT 'C', null, conname, null
+    FROM pg_conversion co
+    WHERE co.oid IN (SELECT objid FROM pg_shdepend WHERE refobjid={{rid}}::oid) AND co.oid > {{lastsysoid}}::oid
+UNION ALL SELECT CASE WHEN prorettype=2279 THEN 'T' ELSE 'p' END, null, proname, null
+    FROM pg_proc pr
+    WHERE pr.oid IN (SELECT objid FROM pg_shdepend WHERE refobjid={{rid}}::oid) AND pr.oid > {{lastsysoid}}::oid
+UNION ALL SELECT 'o', null, oprname || '('::text || COALESCE(tl.typname, ''::text) || CASE WHEN tl.oid IS NOT NULL
+        AND tr.oid IS NOT NULL THEN ','::text END || COALESCE(tr.typname, ''::text) || ')'::text, null
+    FROM pg_operator op
+    LEFT JOIN pg_type tl ON tl.oid=op.oprleft
+    LEFT JOIN pg_type tr ON tr.oid=op.oprright
+    WHERE op.oid IN (SELECT objid FROM pg_shdepend WHERE refobjid={{rid}}::oid) AND op.oid > {{lastsysoid}}::oid
+ORDER BY 1,2,3
+{% endif %}
\ No newline at end of file
diff --git a/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/nodes.sql b/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/nodes.sql
new file mode 100644
index 000000000..1f450b07e
--- /dev/null
+++ b/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/nodes.sql
@@ -0,0 +1,8 @@
+SELECT
+	r.oid, r.rolname, r.rolcanlogin, r.rolsuper
+FROM
+	pg_catalog.pg_roles r
+{% if rid %}
+WHERE r.oid = {{ rid|qtLiteral }}::oid
+{% endif %}
+ORDER BY r.rolcanlogin, r.rolname
diff --git a/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/properties.sql b/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/properties.sql
new file mode 100644
index 000000000..9cb47ff5b
--- /dev/null
+++ b/web/pgadmin/browser/server_groups/servers/roles/templates/roles/sql/default/properties.sql
@@ -0,0 +1,16 @@
+SELECT
+	r.oid, r.*,
+	pg_catalog.shobj_description(r.oid, 'pg_authid') AS description,
+	ARRAY(
+		SELECT
+			CASE WHEN am.admin_option THEN '1' ELSE '0' END || rm.rolname
+		FROM
+			(SELECT * FROM pg_auth_members WHERE member = r.oid) am
+			LEFT JOIN pg_catalog.pg_roles rm ON (rm.oid = am.roleid)
+	) rolmembership
+FROM
+	pg_roles r
+{% if rid %}
+WHERE r.oid = {{ rid|qtLiteral }}::OID
+{% endif %}
+ORDER BY r.rolcanlogin, r.rolname
\ No newline at end of file
diff --git a/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependencies.sql b/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependencies.sql
index 81bb2a676..e69de29bb 100644
--- a/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependencies.sql
+++ b/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependencies.sql
@@ -1,85 +0,0 @@
-SELECT DISTINCT dep.deptype, dep.refclassid, dep.refobjid, cl.relkind, ad.adbin, ad.adsrc,
-    CASE WHEN cl.relkind IS NOT NULL THEN CASE WHEN cl.relkind = 'r' THEN cl.relkind || COALESCE(dep.refobjsubid::text, '') ELSE cl.relkind END
-        WHEN tg.oid IS NOT NULL THEN 'Tr'::text
-        WHEN ty.oid IS NOT NULL THEN CASE WHEN ty.typtype = 'd' THEN 'd'::text ELSE 'Ty'::text END
-        WHEN ns.oid IS NOT NULL THEN 'n'::text
-        WHEN pr.oid IS NOT NULL AND (prtyp.typname = 'trigger' OR prtyp.typname = 'event_trigger') THEN 'Pt'::text
-        WHEN pr.oid IS NOT NULL THEN 'Pf'::text
-        WHEN la.oid IS NOT NULL THEN 'l'::text
-        WHEN rw.oid IS NOT NULL THEN 'Rl'::text
-        WHEN co.oid IS NOT NULL THEN CASE WHEN co.contypid > 0 THEN 'Cd' ELSE 'C'::text || contype END
-        WHEN ad.oid IS NOT NULL THEN 'A'::text
-        WHEN fs.oid IS NOT NULL THEN 'Fs'::text
-        WHEN fdw.oid IS NOT NULL THEN 'Fw'::text
-        WHEN col.oid IS NOT NULL THEN 'Co'::text
-        WHEN ftsc.oid IS NOT NULL THEN 'Fc'::text
-        WHEN ftsp.oid IS NOT NULL THEN 'Fp'::text
-        WHEN ftsd.oid IS NOT NULL THEN 'Fd'::text
-        WHEN ftst.oid IS NOT NULL THEN 'Ft'::text
-        WHEN ext.oid IS NOT NULL THEN 'Ex'::text
-    ELSE ''
-    END AS type,
-    COALESCE(coc.relname, clrw.relname) AS ownertable,
-    CASE WHEN cl.relname IS NOT NULL OR att.attname IS NOT NULL THEN cl.relname || COALESCE('.' || att.attname, '')
-    ELSE COALESCE(cl.relname, co.conname, pr.proname, tg.tgname, ty.typname, la.lanname, rw.rulename, ns.nspname,
-                  fs.srvname, fdw.fdwname, col.collname, ftsc.cfgname, ftsd.dictname, ftsp.prsname,
-                  ftst.tmplname, ext.extname)
-    END AS refname,
-    COALESCE(nsc.nspname, nso.nspname, nsp.nspname, nst.nspname, nsrw.nspname, colns.nspname, ftscns.nspname,
-        ftsdns.nspname, ftspns.nspname, ftstns.nspname) AS nspname,
-    CASE WHEN inhits.inhparent IS NOT NULL THEN '1' ELSE '0' END AS is_inherits,
-    CASE WHEN inhed.inhparent IS NOT NULL THEN '1' ELSE '0' END AS is_inherited
-FROM pg_depend dep
-LEFT JOIN pg_class cl ON dep.refobjid=cl.oid
-LEFT JOIN pg_attribute att ON dep.refobjid=att.attrelid AND dep.refobjsubid=att.attnum
-LEFT JOIN pg_namespace nsc ON cl.relnamespace=nsc.oid
-LEFT JOIN pg_proc pr ON dep.refobjid=pr.oid
-LEFT JOIN pg_namespace nsp ON pr.pronamespace=nsp.oid
-LEFT JOIN pg_trigger tg ON dep.refobjid=tg.oid
-LEFT JOIN pg_type ty ON dep.refobjid=ty.oid
-LEFT JOIN pg_namespace nst ON ty.typnamespace=nst.oid
-LEFT JOIN pg_constraint co ON dep.refobjid=co.oid
-LEFT JOIN pg_class coc ON co.conrelid=coc.oid
-LEFT JOIN pg_namespace nso ON co.connamespace=nso.oid
-LEFT JOIN pg_rewrite rw ON dep.refobjid=rw.oid
-LEFT JOIN pg_class clrw ON clrw.oid=rw.ev_class
-LEFT JOIN pg_namespace nsrw ON clrw.relnamespace=nsrw.oid
-LEFT JOIN pg_language la ON dep.refobjid=la.oid
-LEFT JOIN pg_namespace ns ON dep.refobjid=ns.oid
-LEFT JOIN pg_attrdef ad ON ad.adrelid=att.attrelid AND ad.adnum=att.attnum
-LEFT JOIN pg_foreign_server fs ON fs.oid=dep.refobjid
-LEFT JOIN pg_foreign_data_wrapper fdw ON fdw.oid=dep.refobjid
-LEFT JOIN pg_type prtyp ON prtyp.oid = pr.prorettype
-LEFT JOIN pg_inherits inhits ON (inhits.inhrelid=dep.refobjid)
-LEFT JOIN pg_inherits inhed ON (inhed.inhparent=dep.refobjid)
-LEFT JOIN pg_collation col ON col.oid=dep.refobjid
-LEFT JOIN pg_namespace colns ON col.collnamespace=colns.oid
-LEFT JOIN pg_ts_config ftsc ON ftsc.oid=dep.refobjid
-LEFT JOIN pg_namespace ftscns ON ftsc.cfgnamespace=ftscns.oid
-LEFT JOIN pg_ts_dict ftsd ON ftsd.oid=dep.refobjid
-LEFT JOIN pg_namespace ftsdns ON ftsd.dictnamespace=ftsdns.oid
-LEFT JOIN pg_ts_parser ftsp ON ftsp.oid=dep.refobjid
-LEFT JOIN pg_namespace ftspns ON ftsp.prsnamespace=ftspns.oid
-LEFT JOIN pg_ts_template ftst ON ftst.oid=dep.refobjid
-LEFT JOIN pg_namespace ftstns ON ftst.tmplnamespace=ftstns.oid
-LEFT JOIN pg_extension ext ON ext.oid=dep.refobjid
-{{where_clause}} AND
-refclassid IN ( SELECT oid FROM pg_class WHERE relname IN
-   ('pg_class', 'pg_constraint', 'pg_conversion', 'pg_language', 'pg_proc', 'pg_rewrite', 'pg_namespace',
-   'pg_trigger', 'pg_type', 'pg_attrdef', 'pg_foreign_server', 'pg_foreign_data_wrapper',
-   'pg_collation', 'pg_ts_config', 'pg_ts_dict', 'pg_ts_parser', 'pg_ts_template', 'pg_extension'))
-UNION
-SELECT DISTINCT dep.deptype, dep.refclassid, dep.refobjid, cl.relkind, ad.adbin, ad.adsrc,
-    CASE WHEN cl.relkind IS NOT NULL THEN CASE WHEN cl.relkind = 'r' THEN cl.relkind || COALESCE(dep.refobjsubid::text, '') ELSE cl.relkind END
-    ELSE '' END AS type,
-	NULL AS ownertable,
-	CASE WHEN cl.relname IS NOT NULL OR att.attname IS NOT NULL THEN cl.relname || COALESCE('.' || att.attname, '')
-    ELSE cl.relname END AS refname,
-    nsc.nspname AS nspname, '0' AS is_inherits, '0' AS is_inherited
-FROM pg_depend dep
-LEFT JOIN pg_class cl ON dep.refobjid=cl.oid
-LEFT JOIN pg_attribute att ON dep.refobjid=att.attrelid AND dep.refobjsubid=att.attnum
-LEFT JOIN pg_namespace nsc ON cl.relnamespace=nsc.oid
-LEFT JOIN pg_attrdef ad ON ad.adrelid=att.attrelid AND ad.adnum=att.attnum
-WHERE dep.objid IN (SELECT oid FROM pg_rewrite WHERE ev_class={{object_id}}) AND cl.relkind not in ('v', 'm')
-ORDER BY refclassid, relkind
diff --git a/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependents.sql b/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependents.sql
index 71b0a1edb..e69de29bb 100644
--- a/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependents.sql
+++ b/web/pgadmin/browser/server_groups/servers/templates/depends/gpdb/5_plus/dependents.sql
@@ -1,71 +0,0 @@
-SELECT DISTINCT dep.deptype, dep.classid, cl.relkind, ad.adbin, ad.adsrc,
-    CASE WHEN cl.relkind IS NOT NULL THEN CASE WHEN cl.relkind = 'r' THEN cl.relkind || COALESCE(dep.objsubid::text, '') ELSE cl.relkind END
-        WHEN tg.oid IS NOT NULL THEN 'Tr'::text
-        WHEN ty.oid IS NOT NULL THEN CASE WHEN ty.typtype = 'd' THEN 'd'::text ELSE 'Ty'::text END
-        WHEN ns.oid IS NOT NULL THEN 'n'::text
-        WHEN pr.oid IS NOT NULL AND (prtyp.typname = 'trigger' OR prtyp.typname = 'event_trigger') THEN 'Pt'::text
-        WHEN pr.oid IS NOT NULL THEN 'Pf'::text
-        WHEN la.oid IS NOT NULL THEN 'l'::text
-        WHEN rw.oid IS NOT NULL THEN 'Rl'::text
-        WHEN co.oid IS NOT NULL THEN CASE WHEN co.contypid > 0 THEN 'Cd' ELSE 'C'::text || contype END
-        WHEN ad.oid IS NOT NULL THEN 'A'::text
-        WHEN fs.oid IS NOT NULL THEN 'Fs'::text
-        WHEN fdw.oid IS NOT NULL THEN 'Fw'::text
-        WHEN col.oid IS NOT NULL THEN 'Co'::text
-        WHEN ftsc.oid IS NOT NULL THEN 'Fc'::text
-        WHEN ftsp.oid IS NOT NULL THEN 'Fp'::text
-        WHEN ftsd.oid IS NOT NULL THEN 'Fd'::text
-        WHEN ftst.oid IS NOT NULL THEN 'Ft'::text
-        WHEN ext.oid IS NOT NULL THEN 'Ex'::text
-    ELSE ''
-    END AS type,
-    COALESCE(coc.relname, clrw.relname) AS ownertable,
-    CASE WHEN cl.relname IS NOT NULL AND att.attname IS NOT NULL THEN cl.relname || COALESCE('.' || att.attname, '')
-    ELSE COALESCE(cl.relname, co.conname, pr.proname, tg.tgname, ty.typname, la.lanname, rw.rulename, ns.nspname,
-                  fs.srvname, fdw.fdwname, col.collname, ftsc.cfgname, ftsd.dictname, ftsp.prsname,
-                  ftst.tmplname, ext.extname)
-    END AS refname,
-    COALESCE(nsc.nspname, nso.nspname, nsp.nspname, nst.nspname, nsrw.nspname, colns.nspname, ftscns.nspname,
-        ftsdns.nspname, ftspns.nspname, ftstns.nspname) AS nspname,
-    CASE WHEN inhits.inhparent IS NOT NULL THEN '1' ELSE '0' END AS is_inherits,
-    CASE WHEN inhed.inhparent IS NOT NULL THEN '1' ELSE '0' END AS is_inherited
-FROM pg_depend dep
-LEFT JOIN pg_class cl ON dep.objid=cl.oid
-LEFT JOIN pg_attribute att ON dep.objid=att.attrelid AND dep.objsubid=att.attnum
-LEFT JOIN pg_namespace nsc ON cl.relnamespace=nsc.oid
-LEFT JOIN pg_proc pr ON dep.objid=pr.oid
-LEFT JOIN pg_namespace nsp ON pr.pronamespace=nsp.oid
-LEFT JOIN pg_trigger tg ON dep.objid=tg.oid
-LEFT JOIN pg_type ty ON dep.objid=ty.oid
-LEFT JOIN pg_namespace nst ON ty.typnamespace=nst.oid
-LEFT JOIN pg_constraint co ON dep.objid=co.oid
-LEFT JOIN pg_class coc ON co.conrelid=coc.oid
-LEFT JOIN pg_namespace nso ON co.connamespace=nso.oid
-LEFT JOIN pg_rewrite rw ON dep.objid=rw.oid
-LEFT JOIN pg_class clrw ON clrw.oid=rw.ev_class
-LEFT JOIN pg_namespace nsrw ON clrw.relnamespace=nsrw.oid
-LEFT JOIN pg_language la ON dep.objid=la.oid
-LEFT JOIN pg_namespace ns ON dep.objid=ns.oid
-LEFT JOIN pg_attrdef ad ON ad.oid=dep.objid
-LEFT JOIN pg_foreign_server fs ON fs.oid=dep.objid
-LEFT JOIN pg_foreign_data_wrapper fdw ON fdw.oid=dep.objid
-LEFT JOIN pg_type prtyp ON prtyp.oid = pr.prorettype
-LEFT JOIN pg_inherits inhits ON (inhits.inhrelid=dep.objid)
-LEFT JOIN pg_inherits inhed ON (inhed.inhparent=dep.objid)
-LEFT JOIN pg_collation col ON col.oid=dep.objid
-LEFT JOIN pg_namespace colns ON col.collnamespace=colns.oid
-LEFT JOIN pg_ts_config ftsc ON ftsc.oid=dep.objid
-LEFT JOIN pg_namespace ftscns ON ftsc.cfgnamespace=ftscns.oid
-LEFT JOIN pg_ts_dict ftsd ON ftsd.oid=dep.objid
-LEFT JOIN pg_namespace ftsdns ON ftsd.dictnamespace=ftsdns.oid
-LEFT JOIN pg_ts_parser ftsp ON ftsp.oid=dep.objid
-LEFT JOIN pg_namespace ftspns ON ftsp.prsnamespace=ftspns.oid
-LEFT JOIN pg_ts_template ftst ON ftst.oid=dep.objid
-LEFT JOIN pg_namespace ftstns ON ftst.tmplnamespace=ftstns.oid
-LEFT JOIN pg_extension ext ON ext.oid=dep.objid
-{{where_clause}} AND
-classid IN ( SELECT oid FROM pg_class WHERE relname IN
-   ('pg_class', 'pg_constraint', 'pg_conversion', 'pg_language', 'pg_proc', 'pg_rewrite', 'pg_namespace',
-   'pg_trigger', 'pg_type', 'pg_attrdef', 'pg_foreign_server', 'pg_foreign_data_wrapper',
-   'pg_collation', 'pg_ts_config', 'pg_ts_dict', 'pg_ts_parser', 'pg_ts_template', 'pg_extension'))
-ORDER BY classid, cl.relkind
diff --git a/web/pgadmin/browser/utils.py b/web/pgadmin/browser/utils.py
index 139ac6730..8ce76cb96 100644
--- a/web/pgadmin/browser/utils.py
+++ b/web/pgadmin/browser/utils.py
@@ -19,6 +19,7 @@ from flask_babelex import gettext
 from config import PG_DEFAULT_DRIVER
 from pgadmin.utils.ajax import make_json_response, precondition_required,\
     internal_server_error
+from pgadmin.utils.compile_template_name import compile_template_path
 from pgadmin.utils.exception import ConnectionLost, SSHTunnelConnectionLost,\
     CryptKeyMissing
 
@@ -474,9 +475,12 @@ class PGChildNodeView(NodeView):
         """
 
         # Set the sql_path
-        sql_path = 'depends/{0}/#{1}#'.format(
-            conn.manager.server_type, conn.manager.version)
-
+        sql_path = compile_template_path(
+            'depends/' + conn.manager.server_type,
+            conn.manager.server_type,
+            conn.manager.version
+        )
+        
         if where is None:
             where_clause = "WHERE dep.objid={0}::oid".format(object_id)
         else:
@@ -530,8 +534,11 @@ class PGChildNodeView(NodeView):
         Returns: Dictionary of dependents for the selected node.
         """
         # Set the sql_path
-        sql_path = 'depends/{0}/#{1}#'.format(
-            conn.manager.server_type, conn.manager.version)
+        sql_path = compile_template_path(
+            'depends/' + conn.manager.server_type,
+            conn.manager.server_type,
+            conn.manager.version
+        )
 
         if where is None:
             where_clause = "WHERE dep.refobjid={0}::oid".format(object_id)
@@ -603,6 +610,7 @@ class PGChildNodeView(NodeView):
         status, result = conn.execute_dict(query)
         if not status:
             current_app.logger.error(result)
+            return []
 
         dependency = list()
 
diff --git a/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/activity.sql b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/activity.sql
index 0b3918e17..05f168e9f 100644
--- a/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/activity.sql
+++ b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/activity.sql
@@ -11,5 +11,5 @@ SELECT
 FROM
     pg_stat_activity
 {% if did %}WHERE
-    datid = {{ did }} {% endif %}
+    datid = {{ did }}{% endif %}
 ORDER BY pid
diff --git a/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/dashboard_stats.sql b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/dashboard_stats.sql
index 2b0017d09..5a718557b 100644
--- a/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/dashboard_stats.sql
+++ b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_5.0_plus/dashboard_stats.sql
@@ -4,9 +4,9 @@
 {% set add_union = true %}
 SELECT 'session_stats' AS chart_name, row_to_json(t) AS chart_data
 FROM (SELECT
-   (SELECT count(*) FROM pg_stat_activity{% if did %} WHERE datid = {{ did }} {% endif %}) AS "{{ _('Total') }}",
-   (SELECT count(*) FROM pg_stat_activity WHERE current_query NOT LIKE '<IDLE>%'{% if did %} AND datid = {{ did }} {% endif %})  AS "{{ _('Active') }}",
-   (SELECT count(*) FROM pg_stat_activity WHERE current_query LIKE '<IDLE>%'{% if did %} AND datid =  {{ did }} {% endif %})  AS "{{ _('Idle') }}"
+   (SELECT count(*) FROM pg_stat_activity{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Total') }}",
+   (SELECT count(*) FROM pg_stat_activity WHERE current_query NOT LIKE '<IDLE>%'{% if did %} AND datid = {{ did }}{% endif %})  AS "{{ _('Active') }}",
+   (SELECT count(*) FROM pg_stat_activity WHERE current_query LIKE '<IDLE>%'{% if did %} AND datid =  {{ did }}{% endif %})  AS "{{ _('Idle') }}"
 ) t
 {% endif %}
 {% if add_union and 'tps_stats' in chart_names %}
@@ -16,9 +16,9 @@ UNION ALL
 {% set add_union = true %}
 SELECT 'tps_stats' AS chart_name, row_to_json(t) AS chart_data
 FROM (SELECT
-   (SELECT sum(xact_commit) + sum(xact_rollback) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Transactions') }}",
-   (SELECT sum(xact_commit) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Commits') }}",
-   (SELECT sum(xact_rollback) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Rollbacks') }}"
+   (SELECT sum(xact_commit) + sum(xact_rollback) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Transactions') }}",
+   (SELECT sum(xact_commit) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Commits') }}",
+   (SELECT sum(xact_rollback) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Rollbacks') }}"
 ) t
 {% endif %}
 {% if add_union and 'ti_stats' in chart_names %}
@@ -28,9 +28,9 @@ UNION ALL
 {% set add_union = true %}
 SELECT 'ti_stats' AS chart_name, row_to_json(t) AS chart_data
 FROM (SELECT
-   (SELECT sum(tup_inserted) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Inserts') }}",
-   (SELECT sum(tup_updated) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Updates') }}",
-   (SELECT sum(tup_deleted) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Deletes') }}"
+   (SELECT sum(tup_inserted) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Inserts') }}",
+   (SELECT sum(tup_updated) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Updates') }}",
+   (SELECT sum(tup_deleted) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Deletes') }}"
 ) t
 {% endif %}
 {% if add_union and 'to_stats' in chart_names %}
@@ -40,8 +40,8 @@ UNION ALL
 {% set add_union = true %}
 SELECT 'to_stats' AS chart_name, row_to_json(t) AS chart_data
 FROM (SELECT
-   (SELECT sum(tup_fetched) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Fetched') }}",
-   (SELECT sum(tup_returned) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Returned') }}"
+   (SELECT sum(tup_fetched) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Fetched') }}",
+   (SELECT sum(tup_returned) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Returned') }}"
 ) t
 {% endif %}
 {% if add_union and 'bio_stats' in chart_names %}
@@ -51,7 +51,7 @@ UNION ALL
 {% set add_union = true %}
 SELECT 'bio_stats' AS chart_name, row_to_json(t) AS chart_data
 FROM (SELECT
-   (SELECT sum(blks_read) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Reads') }}",
-   (SELECT sum(blks_hit) FROM pg_stat_database{% if did %} WHERE datname = (SELECT datname FROM pg_database WHERE oid = {{ did }}){% endif %}) AS "{{ _('Hits') }}"
+   (SELECT sum(blks_read) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Reads') }}",
+   (SELECT sum(blks_hit) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Hits') }}"
 ) t
 {% endif %}
diff --git a/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_6.0_plus/activity.sql b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_6.0_plus/activity.sql
new file mode 100644
index 000000000..e01b89900
--- /dev/null
+++ b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_6.0_plus/activity.sql
@@ -0,0 +1,19 @@
+/*pga4dash*/
+SELECT
+    pid,
+    datname,
+    usename,
+    application_name,
+    client_addr,
+    to_char(backend_start, 'YYYY-MM-DD HH24:MI:SS TZ') AS backend_start,
+    state,
+    CASE WHEN waiting THEN '{{ _('yes') }}' ELSE '{{ _('no') }}' END AS waiting,
+    waiting_reason AS wait_event,
+    query,
+    to_char(state_change, 'YYYY-MM-DD HH24:MI:SS TZ') AS state_change,
+    to_char(query_start, 'YYYY-MM-DD HH24:MI:SS TZ') AS query_start
+FROM
+    pg_stat_activity
+{% if did %}WHERE
+    datid = {{ did }}{% endif %}
+ORDER BY pid
diff --git a/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_6.0_plus/dashboard_stats.sql b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_6.0_plus/dashboard_stats.sql
new file mode 100644
index 000000000..2bcc6b333
--- /dev/null
+++ b/web/pgadmin/dashboard/templates/dashboard/sql/gpdb_6.0_plus/dashboard_stats.sql
@@ -0,0 +1,57 @@
+/*pga4dash*/
+{% set add_union = false %}
+{% if 'session_stats' in chart_names %}
+{% set add_union = true %}
+SELECT 'session_stats' AS chart_name, row_to_json(t) AS chart_data
+FROM (SELECT
+   (SELECT count(*) FROM pg_stat_activity{% if did %} WHERE datid = {{ did }} {% endif %}) AS "{{ _('Total') }}",
+   (SELECT count(*) FROM pg_stat_activity WHERE state = 'active'{% if did %} AND datid = {{ did }} {% endif %}) AS "{{ _('Active') }}",
+   (SELECT count(*) FROM pg_stat_activity WHERE state = 'idle'{% if did %} AND datid = {{ did }} {% endif %}) AS "{{ _('Idle') }}"
+) t
+{% endif %}
+{% if add_union and 'tps_stats' in chart_names %}
+UNION ALL
+{% endif %}
+{% if 'tps_stats' in chart_names %}
+{% set add_union = true %}
+SELECT 'tps_stats' AS chart_name, row_to_json(t) AS chart_data
+FROM (SELECT
+   (SELECT sum(xact_commit) + sum(xact_rollback) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Transactions') }}",
+   (SELECT sum(xact_commit) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Commits') }}",
+   (SELECT sum(xact_rollback) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Rollbacks') }}"
+) t
+{% endif %}
+{% if add_union and 'ti_stats' in chart_names %}
+UNION ALL
+{% endif %}
+{% if 'ti_stats' in chart_names %}
+{% set add_union = true %}
+SELECT 'ti_stats' AS chart_name, row_to_json(t) AS chart_data
+FROM (SELECT
+   (SELECT sum(tup_inserted) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Inserts') }}",
+   (SELECT sum(tup_updated) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Updates') }}",
+   (SELECT sum(tup_deleted) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Deletes') }}"
+) t
+{% endif %}
+{% if add_union and 'to_stats' in chart_names %}
+UNION ALL
+{% endif %}
+{% if 'to_stats' in chart_names %}
+{% set add_union = true %}
+SELECT 'to_stats' AS chart_name, row_to_json(t) AS chart_data
+FROM (SELECT
+   (SELECT sum(tup_fetched) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Fetched') }}",
+   (SELECT sum(tup_returned) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Returned') }}"
+) t
+{% endif %}
+{% if add_union and 'bio_stats' in chart_names %}
+UNION ALL
+{% endif %}
+{% if 'bio_stats' in chart_names %}
+{% set add_union = true %}
+SELECT 'bio_stats' AS chart_name, row_to_json(t) AS chart_data
+FROM (SELECT
+   (SELECT sum(blks_read) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Reads') }}",
+   (SELECT sum(blks_hit) FROM pg_stat_database{% if did %} WHERE datid = {{ did }}{% endif %}) AS "{{ _('Hits') }}"
+) t
+{% endif %}
diff --git a/web/pgadmin/utils/versioned_template_loader.py b/web/pgadmin/utils/versioned_template_loader.py
index c4dcc1528..3dd135f29 100644
--- a/web/pgadmin/utils/versioned_template_loader.py
+++ b/web/pgadmin/utils/versioned_template_loader.py
@@ -12,6 +12,21 @@ from jinja2 import TemplateNotFound
 
 class VersionedTemplateLoader(DispatchingJinjaLoader):
     def get_source(self, environment, template):
+        """
+        Should support the following template string format:
+
+        - connect/sql/9.0_plus/check_recovery.sql           <= connect/sql/#xxx#/check_recovery.sql
+        - dashboard/sql/9.6_plus/activity.sql               <= dashboard/sql/#xxx#/activity.sql
+        - dashboard/sql/gpdb_6.0_plus/activity.sql          <= dashboard/sql/#xxx#xxx#/activity.sql
+        - table/sql/9.6_plus/properties.sql                 <= table/sql/#xxx#/properties.sql
+        - table/sql/gpdb_5.0_plus/properties.sql            <= table/sql/#xxx#xxx#/properties.sql
+        - depends/pg/9.6_plus/role_dependencies.sql         <= depends/xxx/#xxx#xxx#/role_dependencies.sql
+        - depends/gpdb/5_plus/role_dependencies.sql         <= depends/xxx/#xxx#xxx#/role_dependencies.sql
+        - function/gpdb/sql/5_plus/get_definition.sql       <= function/###/sql/#xxx#xxx#/get_definition.sql
+        - function/pg/sql/10_plus/get_definition.sql        <= function/###/sql/#xxx#xxx#/get_definition.sql
+        - schemas/gpdb_5.0_plus/sql/acl.sql                 <= schemas/#xxx#xxx#/sql/acl.sql
+        - schemas/pg/9.6_plus/sql/acl.sql                   <= schemas/xxx/#xxx#/sql/acl.sql
+        """
         specified_version_number, exists = parse_version(template)
         if not exists:
             return super(VersionedTemplateLoader, self).get_source(
@@ -79,7 +94,9 @@ def get_version_mapping_directories(server_type):
     """
     if server_type == 'gpdb':
         return (
+            {'name': "gpdb_6.0_plus", 'number': 90424},
             {'name': "gpdb_5.0_plus", 'number': 80323},
+            {'name': "6_plus", 'number': 90424},
             {'name': "5_plus", 'number': 80323},
             {'name': "default", 'number': 0}
         )
