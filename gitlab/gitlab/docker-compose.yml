version: '2'
services:
  gitlab:
    image: 'registry.inventec/infra/gitlab/gitlab-ce:15.4.6-ce.0'
    container_name: gitlab
    hostname: 'gitlab'
    ports:
      - '80:80'
      - '443:443'
      - '22:22'
    # 如果迁移数据目录，需要执行 docker exec -it gitlab update-permissions && chown -R git /var/opt/gitlab/gitaly/
    volumes:
      - /git-volume/config:/etc/gitlab
      - /git-volume/logs:/var/log/gitlab
      - /git-volume/data:/var/opt/gitlab
    restart: always
    # https://docs.gitlab.com/ee/install/docker.html#devshm-mount-not-having-enough-space-in-docker-container
    shm_size: 1g
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.itc.inventec.net/'
        # # 如果您需要使用非默认（443）的HTTPS端口，只需将其指定为external_url的一部分即可。
        # external_url "https://gitlab.itc.inventec.net/"
        # # 将所有HTTP流量重定向到HTTPS
        # nginx['redirect_http_to_https'] = true
        # # 配置ssl证书，tfss.me为你的域名
        # nginx['ssl_certificate'] = "/etc/gitlab/trusted-certs/8654013__itc.inventec.net.pem"
        # nginx['ssl_certificate_key'] = "/etc/gitlab/trusted-certs/8654013__itc.inventec.net.key"
        # 默认情况下，NGINX和GitLab将记录连接客户端的IP地址。
        # 如果您的GitLab位于反向代理之后，您可能不希望代理的IP地址显示为客户端地址。
        # 您可以通过将您的反向代理添加到real_ip_trusted_addresses列表中来让NGINX查找不同的地址：
        # nginx['real_ip_trusted_addresses'] = [ '192.168.1.0/24', '192.168.2.1', '2001:0db8::/32' ]
        nginx['real_ip_header'] = 'X-Real-IP'
        nginx['real_ip_recursive'] = 'on'
        gitlab_rails['ldap_enabled'] = true
        gitlab_rails['ldap_servers'] = YAML.load <<-EOS # remember to close this block with 'EOS' below
        main: # 'main' is the GitLab 'provider ID' of this LDAP server
          ## label
          #
          # A human-friendly name for your LDAP server. It is OK to change the label later,
          # for instance if you find out it is too large to fit on the web page.
          #
          # Example: 'Paris' or 'Acme, Ltd.'
          label: 'ITC AD'
          host: '${HOST}'
          port: 389 # or 636
          uid: 'sAMAccountName'
          bind_dn: 'CN=${USERNAME},OU=${OU},DC=${DC},DC=${DC}'
          password: '${PASSWORD}'
          encryption: 'plain' # "start_tls" or "simple_tls" or "plain"
          # This setting specifies if LDAP server is Active Directory LDAP server.
          # For non AD servers it skips the AD specific queries.
          # If your LDAP server is not AD, set this to false.
          active_directory: true
          # If allow_username_or_email_login is enabled, GitLab will ignore everything
          # after the first '@' in the LDAP username submitted by the user on login.
          #
          # Example:
          # - the user enters 'jane.doe@example.com' and 'p@ssw0rd' as LDAP credentials;
          # - GitLab queries the LDAP server with 'jane.doe' and 'p@ssw0rd'.
          #
          # If you are using "uid: 'userPrincipalName'" on ActiveDirectory you need to
          # disable this setting, because the userPrincipalName contains an '@'.
          allow_username_or_email_login: true
          # Base where we can search for users
          #
          #   Ex. ou=People,dc=gitlab,dc=example
          #
          base: 'DC=itc,DC=inventec'
          # Filter LDAP users
          #
          #   Format: RFC 4515 http://tools.ietf.org/search/rfc4515
          #   Ex. (employeeType=developer)
          #
          #   Note: GitLab does not support omniauth-ldap's custom filter syntax.
          #
          user_filter: ''
        EOS
        # gitlab_rails['omniauth_enabled'] = true
        # gitlab_rails['omniauth_allow_single_sign_on'] = ['oauth2_generic']
        # gitlab_rails['omniauth_auto_link_ldap_user'] = true
        # gitlab_rails['omniauth_block_auto_created_users'] = true
        # gitlab_rails['omniauth_providers'] = [
        #   {
        #     'name' => 'oauth2_generic',
        #     'app_id' => 'gittest',
        #     'app_secret' => '123456',
        #     'args' => {
        #       client_options: {
        #         'site' => 'http://itc-dauth.itc.inventec', # including port if necessary
        #         'user_info_url' => '/rbpc/user'
        #       },
        #       user_response_structure: {
        #         root_path: [], # i.e. if attributes are returned in JsonAPI format (in a 'user' node nested under a 'data' node)
        #         attributes: { 
        #           name: 'name',
        #           email: 'email',
        #           nickname: 'login'
        #         } # if the nickname attribute of a user is called 'username'
        #       },
        #       # optionally, you can add the following two lines to "white label" the display name
        #       # of this strategy (appears in urls and Gitlab login buttons)
        #       # If you do this, you must also replace oauth2_generic, everywhere it appears above, with the new name. 
        #       # name: 'dauth', # display name for this strategy
        #       # strategy_class: "OmniAuth::Strategies::OAuth2Generic" # Devise-specific config option Gitlab uses to find renamed strategy
        #     }
        #   }
        # ]
        gitlab_rails['log_directory'] = "/var/log/gitlab/gitlab-rails"
        puma['log_directory'] = "/var/log/gitlab/puma"
        registry['log_directory'] = "/var/log/gitlab/registry"
        # Below are some of the default settings
        logging['logrotate_frequency'] = "daily" # rotate logs daily
        logging['logrotate_size'] = nil # do not rotate by size by default
        logging['logrotate_rotate'] = 30 # keep 30 rotated logs
        logging['logrotate_compress'] = "compress" # see 'man logrotate'
        logging['logrotate_method'] = "copytruncate" # see 'man logrotate'
        logging['logrotate_postrotate'] = nil # no postrotate command by default
        logging['logrotate_dateformat'] = nil # use date extensions for rotated files rather than numbers e.g. a value of "-%Y-%m-%d" would give rotated files like p
        # You can add overrides per service
        # nginx['logrotate_frequency'] = nil
        # nginx['logrotate_size'] = "200M"
        # You can also disable the built-in logrotate service if you want
        # logrotate['enable'] = false
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_address'] = "${SMTP_ADDRESS}"
        gitlab_rails['smtp_port'] = 25
        gitlab_rails['smtp_domain'] = "${SMTP_ADDRESS}"
        gitlab_rails['smtp_authentication'] = false
        gitlab_rails['smtp_enable_starttls_auto'] = true
        gitlab_rails['smtp_openssl_verify_mode'] = 'none'
        # If your SMTP server does not like the default 'From: gitlab@localhost' you
        # can change the 'From' with this setting.
        gitlab_rails['gitlab_email_from'] = 'no-reply-itc-gitlab@inventec.com'
        gitlab_rails['gitlab_email_reply_to'] = 'no-reply-itc-gitlab@inventec.com'
        # gitlab_rails['initial_root_password'] = 'PASSWORD'
        # gitlab_rails['initial_shared_runners_registration_token'] = "iuLaUhGZYyFgTxAyZ6HbdFUZ"
        prometheus_monitoring['enable'] = false
